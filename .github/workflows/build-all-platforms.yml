name: Build and release Subtitle Edit (Multi-Platform)

on:
  workflow_dispatch:
    inputs:
      build_configuration:
        description: 'Build configuration'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean
      is_prerelease:
        description: 'Mark as pre-release'
        required: true
        default: true
        type: boolean
      release_tag:
        description: 'Release tag (e.g., v1.0.0-beta)'
        required: false
        default: ''
        type: string

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration ${{ inputs.build_configuration }} --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Download libmpv for Windows
        run: |
          Invoke-WebRequest -Uri "https://github.com/SubtitleEdit/support-files/releases/download/libmpv-2025-01-25/libmpv2-64.zip" -OutFile "libmpv2-64.zip"
          Expand-Archive -Path "libmpv2-64.zip" -DestinationPath "libmpv-temp"

      - name: Publish Windows x64 app
        run: |
          dotnet publish src/UI/UI.csproj -c ${{ inputs.build_configuration }} -r win-x64 --self-contained true `
            -p:PublishSingleFile=true `
            -o ./publish/windows-x64
          Copy-Item "libmpv-temp/libmpv-2.dll" "./publish/windows-x64/"

      - name: Publish Windows ARM64 app
        run: |
          dotnet publish src/UI/UI.csproj -c ${{ inputs.build_configuration }} -r win-arm64 --self-contained true `
            -p:PublishSingleFile=true `
            -o ./publish/windows-arm64

      - name: Remove PDB files
        run: |
          Get-ChildItem -Path "./publish/windows-x64/" -Recurse -Include *.pdb | Remove-Item -Force
          Get-ChildItem -Path "./publish/windows-arm64/" -Recurse -Include *.pdb | Remove-Item -Force

      - name: Setup WiX
        run: |
          dotnet tool install --global wix --version 5.0.1
          wix extension add -g WixToolset.UI.wixext/5.0.1

      - name: Build MSI Installer for x64
        run: |
          wix build ./installer/Product.wxs `
            -arch x64 `
            -ext WixToolset.UI.wixext `
            -d SourceDir="./publish/windows-x64/" `
            -d ProjectDir="./" `
            -d ProductVersion="1.0.0" `
            -o ./SubtitleEdit-Windows-x64.msi

      # - name: Build MSI Installer for ARM64
      #   run: |
      #     wix build ./installer/Product.wxs `
      #       -arch arm64 `
      #       -ext WixToolset.UI.wixext `
      #       -d SourceDir="./publish/windows-arm64/" `
      #       -d ProjectDir="./" `
      #       -d ProductVersion="1.0.0" `
      #       -o ./SubtitleEdit-Windows-ARM64.msi

      - name: Create Windows ZIP packages
        run: |
          Compress-Archive -Path "./publish/windows-x64/*" -DestinationPath "./SubtitleEdit-Windows-x64.zip"
          Compress-Archive -Path "./publish/windows-arm64/*" -DestinationPath "./SubtitleEdit-Windows-ARM64.zip"

      - name: Upload Windows x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: se-windows-x64
          path: ./publish/windows-x64/

      - name: Upload Windows ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: se-windows-arm64
          path: ./publish/windows-arm64/

      - name: Upload Windows ZIP packages
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip-packages
          path: |
            ./SubtitleEdit-Windows-x64.zip
            ./SubtitleEdit-Windows-ARM64.zip

      - name: Upload Windows MSI Installers
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi-installers
          path: |
            ./SubtitleEdit-Windows-x64.msi
            # ./SubtitleEdit-Windows-ARM64.msi

  build-macos:
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration ${{ inputs.build_configuration }} --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal
      - name: Publish macOS x64 app
        run: |
          dotnet publish src/UI/UI.csproj -c ${{ inputs.build_configuration }} -r osx-x64 --self-contained true \
            -p:PublishSingleFile=true \
            -o ./publish/macos-x64
      - name: Publish macOS ARM64 app
        run: |
          dotnet publish src/UI/UI.csproj -c ${{ inputs.build_configuration }} -r osx-arm64 --self-contained true \
            -p:PublishSingleFile=true \
            -o ./publish/macos-arm64
      - name: Remove PDB files from macOS artifacts
        run: |
          find "./publish/macos-x64/" -name "*.pdb" -type f -delete
          find "./publish/macos-arm64/" -name "*.pdb" -type f -delete
      - name: Convert ICO to ICNS
        run: |
          # Convert ICO to PNG first (extract largest size)
          sips -s format png "src/UI/SE.ico" --out "SE.png"
          
          # Create iconset directory
          mkdir SE.iconset
          
          # Generate different sizes for ICNS
          sips -z 16 16 "SE.png" --out "SE.iconset/icon_16x16.png"
          sips -z 32 32 "SE.png" --out "SE.iconset/icon_16x16@2x.png"
          sips -z 32 32 "SE.png" --out "SE.iconset/icon_32x32.png"
          sips -z 64 64 "SE.png" --out "SE.iconset/icon_32x32@2x.png"
          sips -z 128 128 "SE.png" --out "SE.iconset/icon_128x128.png"
          sips -z 256 256 "SE.png" --out "SE.iconset/icon_128x128@2x.png"
          sips -z 256 256 "SE.png" --out "SE.iconset/icon_256x256.png"
          sips -z 512 512 "SE.png" --out "SE.iconset/icon_256x256@2x.png"
          sips -z 512 512 "SE.png" --out "SE.iconset/icon_512x512.png"
          sips -z 1024 1024 "SE.png" --out "SE.iconset/icon_512x512@2x.png"
          
          # Convert to ICNS
          iconutil -c icns SE.iconset
      - name: Create macOS app bundles
        run: |
          # Create app bundle structure for x64
          mkdir -p "./SubtitleEdit-x64.app/Contents/MacOS"
          mkdir -p "./SubtitleEdit-x64.app/Contents/Resources"
          
          # Copy all files (executable + dylibs) to app bundle
          cp "./publish/macos-x64/SubtitleEdit" "./SubtitleEdit-x64.app/Contents/MacOS/"
          cp "./publish/macos-x64/"*.dylib "./SubtitleEdit-x64.app/Contents/MacOS/"
          cp "./SE.icns" "./SubtitleEdit-x64.app/Contents/Resources/"
          chmod +x "./SubtitleEdit-x64.app/Contents/MacOS/SubtitleEdit"
          
          # Create Info.plist for x64
          cat > "./SubtitleEdit-x64.app/Contents/Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>SubtitleEdit</string>
              <key>CFBundleIdentifier</key>
              <string>dk.nikse.subtitleedit</string>
              <key>CFBundleName</key>
              <string>Subtitle Edit</string>
              <key>CFBundleDisplayName</key>
              <string>Subtitle Edit</string>
              <key>CFBundleVersion</key>
              <string>1.0</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleSignature</key>
              <string>SBED</string>
              <key>CFBundleIconFile</key>
              <string>SE.icns</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.15</string>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>NSSupportsAutomaticGraphicsSwitching</key>
              <true/>
              <key>LSApplicationCategoryType</key>
              <string>public.app-category.video</string>
              <key>CFBundleDocumentTypes</key>
              <array>
                  <dict>
                      <key>CFBundleTypeExtensions</key>
                      <array>
                          <string>srt</string>
                          <string>ass</string>
                          <string>ssa</string>
                          <string>sub</string>
                          <string>vtt</string>
                          <string>sbv</string>
                          <string>stl</string>
                          <string>xml</string>
                      </array>
                      <key>CFBundleTypeName</key>
                      <string>Subtitle Files</string>
                      <key>CFBundleTypeRole</key>
                      <string>Editor</string>
                      <key>LSHandlerRank</key>
                      <string>Owner</string>
                  </dict>
                  <dict>
                      <key>CFBundleTypeExtensions</key>
                      <array>
                          <string>mp4</string>
                          <string>mkv</string>
                          <string>avi</string>
                          <string>mov</string>
                          <string>wmv</string>
                          <string>flv</string>
                          <string>webm</string>
                          <string>m4v</string>
                      </array>
                      <key>CFBundleTypeName</key>
                      <string>Video Files</string>
                      <key>CFBundleTypeRole</key>
                      <string>Viewer</string>
                      <key>LSHandlerRank</key>
                      <string>Alternate</string>
                  </dict>
              </array>
              <key>NSAppTransportSecurity</key>
              <dict>
                  <key>NSAllowsArbitraryLoads</key>
                  <true/>
              </dict>
          </dict>
          </plist>
          EOF
          
          # Create app bundle structure for ARM64
          mkdir -p "./SubtitleEdit-ARM64.app/Contents/MacOS"
          mkdir -p "./SubtitleEdit-ARM64.app/Contents/Resources"
          
          # Copy all files (executable + dylibs) to app bundle
          cp "./publish/macos-arm64/SubtitleEdit" "./SubtitleEdit-ARM64.app/Contents/MacOS/"
          cp "./publish/macos-arm64/"*.dylib "./SubtitleEdit-ARM64.app/Contents/MacOS/"
          cp "./SE.icns" "./SubtitleEdit-ARM64.app/Contents/Resources/"
          chmod +x "./SubtitleEdit-ARM64.app/Contents/MacOS/SubtitleEdit"
          
          # Create Info.plist for ARM64
          cat > "./SubtitleEdit-ARM64.app/Contents/Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>SubtitleEdit</string>
              <key>CFBundleIdentifier</key>
              <string>dk.nikse.subtitleedit</string>
              <key>CFBundleName</key>
              <string>Subtitle Edit</string>
              <key>CFBundleDisplayName</key>
              <string>Subtitle Edit</string>
              <key>CFBundleVersion</key>
              <string>1.0</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleSignature</key>
              <string>SBED</string>
              <key>CFBundleIconFile</key>
              <string>SE.icns</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.15</string>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>NSSupportsAutomaticGraphicsSwitching</key>
              <true/>
              <key>LSApplicationCategoryType</key>
              <string>public.app-category.video</string>
              <key>CFBundleDocumentTypes</key>
              <array>
                  <dict>
                      <key>CFBundleTypeExtensions</key>
                      <array>
                          <string>srt</string>
                          <string>ass</string>
                          <string>ssa</string>
                          <string>sub</string>
                          <string>vtt</string>
                          <string>sbv</string>
                          <string>stl</string>
                          <string>xml</string>
                      </array>
                      <key>CFBundleTypeName</key>
                      <string>Subtitle Files</string>
                      <key>CFBundleTypeRole</key>
                      <string>Editor</string>
                      <key>LSHandlerRank</key>
                      <string>Owner</string>
                  </dict>
                  <dict>
                      <key>CFBundleTypeExtensions</key>
                      <array>
                          <string>mp4</string>
                          <string>mkv</string>
                          <string>avi</string>
                          <string>mov</string>
                          <string>wmv</string>
                          <string>flv</string>
                          <string>webm</string>
                          <string>m4v</string>
                      </array>
                      <key>CFBundleTypeName</key>
                      <string>Video Files</string>
                      <key>CFBundleTypeRole</key>
                      <string>Viewer</string>
                      <key>LSHandlerRank</key>
                      <string>Alternate</string>
                  </dict>
              </array>
              <key>NSAppTransportSecurity</key>
              <dict>
                  <key>NSAllowsArbitraryLoads</key>
                  <true/>
              </dict>
          </dict>
          </plist>
          EOF
      - name: Create DMG files
        run: |
          # Create DMG for x64
          mkdir -p "./dmg-temp-x64"
          cp -R "./SubtitleEdit-x64.app" "./dmg-temp-x64/"
          
          # Create symbolic link to Applications folder
          ln -s /Applications "./dmg-temp-x64/Applications"
          
          # Create DMG
          hdiutil create -volname "SubtitleEdit x64" -srcfolder "./dmg-temp-x64" -ov -format UDZO "./SubtitleEdit-macOS-x64.dmg"
          
          # Create DMG for ARM64
          mkdir -p "./dmg-temp-arm64"
          cp -R "./SubtitleEdit-ARM64.app" "./dmg-temp-arm64/"
          
          # Create symbolic link to Applications folder
          ln -s /Applications "./dmg-temp-arm64/Applications"
          
          # Create DMG
          hdiutil create -volname "SubtitleEdit ARM64" -srcfolder "./dmg-temp-arm64" -ov -format UDZO "./SubtitleEdit-macOS-ARM64.dmg"
          
          # Clean up temp directories
          rm -rf "./dmg-temp-x64" "./dmg-temp-arm64"
      - name: Upload macOS x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: se-macos-x64
          path: ./publish/macos-x64/
      - name: Upload macOS ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: se-macos-arm64
          path: ./publish/macos-arm64/
      - name: Upload macOS DMG packages
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg-packages
          path: |
            ./SubtitleEdit-macOS-x64.dmg
            ./SubtitleEdit-macOS-ARM64.dmg
  
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration ${{ inputs.build_configuration }} --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Publish Linux x64 app
        run: |
          dotnet publish src/UI/UI.csproj -c ${{ inputs.build_configuration }} -r linux-x64 --self-contained true \
            -p:PublishSingleFile=true \
            -o ./publish/linux-x64

      - name: Remove PDB files from Linux artifacts
        run: |
          find "./publish/linux-x64/" -name "*.pdb" -type f -delete

      - name: Create Linux TAR package
        run: |
          cd ./publish/linux-x64 && tar -czf ../../SubtitleEdit-Linux-x64.tar.gz . && cd ../..

      - name: Upload Linux x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: se-linux-x64
          path: ./publish/linux-x64/

      - name: Upload Linux TAR package
        uses: actions/upload-artifact@v4
        with:
          name: linux-tar-package
          path: ./SubtitleEdit-Linux-x64.tar.gz

  create-release:
    if: ${{ inputs.create_release }}
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Generate release tag
        id: tag
        run: |
          if [ -n "${{ inputs.release_tag }}" ]; then
            echo "tag=${{ inputs.release_tag }}" >> $GITHUB_OUTPUT
          else
            timestamp=$(date +"%Y%m%d-%H%M%S")
            echo "tag=pre-release-${timestamp}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p ./release-assets
          
          # Copy ZIP/TAR packages to release assets
          cp ./artifacts/windows-msi-installers/*.msi ./release-assets/
          cp ./artifacts/windows-zip-packages/*.zip ./release-assets/
          cp ./artifacts/macos-zip-packages/*.zip ./release-assets/
          cp ./artifacts/linux-tar-package/*.tar.gz ./release-assets/
          
          # List all files that will be uploaded
          echo "Release assets:"
          ls -la ./release-assets/

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Subtitle Edit ${{ steps.tag.outputs.tag }}
          body: |
            **Build Configuration:** ${{ inputs.build_configuration }}
            **Build Date:** ${{ steps.date.outputs.date }}
      
            ### Downloads
            - **Windows x64 installer:** [SubtitleEdit-Windows-x64.msi](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SubtitleEdit-Windows-x64.msi)
            - **Windows x64:** [SubtitleEdit-Windows-x64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SubtitleEdit-Windows-x64.zip)
            - **Windows ARM64:** [SubtitleEdit-Windows-ARM64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SubtitleEdit-Windows-ARM64.zip)
            - **macOS ARM64 (Apple Silicon - M1/M2/M3/M4 architecture):** [SubtitleEdit-macOS-ARM64.dmg](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SubtitleEdit-macOS-ARM64.dmg)
            - **macOS x64 (Intel 64-bit):** [SubtitleEdit-macOS-x64.dmg](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SubtitleEdit-macOS-x64.dmg)
            - **Linux x64:** [SubtitleEdit-Linux-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SubtitleEdit-Linux-x64.tar.gz)
      
            ### Installation
            1. Fix requirements, please see [System Requirements](https://github.com/niksedk/subtitleedit-avalonia#system-requirements)
            2. Download the appropriate package for your platform
            3. Extract the archive (or use installer if available)
            4. Run the executable (might need some permissions on macOS)
      
            *This is an automated build from the GitHub Actions workflow.*
          draft: false
          prerelease: ${{ inputs.is_prerelease }}
          files: |
            ./release-assets/SubtitleEdit-Windows-x64.msi
            ./release-assets/SubtitleEdit-Windows-x64.zip
            ./release-assets/SubtitleEdit-Windows-ARM64.zip
            ./release-assets/SubtitleEdit-macOS-ARM64.dmg
            ./release-assets/SubtitleEdit-macOS-x64.dmg
            ./release-assets/SubtitleEdit-Linux-x64.tar.gz