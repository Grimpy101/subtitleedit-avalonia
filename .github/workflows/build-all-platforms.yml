name: Build and release Subtitle Edit (Multi-Platform)

on:
  workflow_dispatch:
    inputs:
      build_configuration:
        description: 'Build configuration'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean
      is_prerelease:
        description: 'Mark as pre-release'
        required: true
        default: true
        type: boolean
      release_tag:
        description: 'Release tag (e.g., v1.0.0-beta)'
        required: false
        default: ''
        type: string

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration ${{ inputs.build_configuration }} --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Download libmpv for Windows
        run: |
          Invoke-WebRequest -Uri "https://github.com/SubtitleEdit/support-files/releases/download/libmpv-2025-01-25/libmpv2-64.zip" -OutFile "libmpv2-64.zip"
          Expand-Archive -Path "libmpv2-64.zip" -DestinationPath "libmpv-temp"

      - name: Publish Windows x64 app
        run: |
          dotnet publish src/UI/UI.csproj -c ${{ inputs.build_configuration }} -r win-x64 --self-contained true `
            -p:PublishSingleFile=true `
            -o ./publish/windows-x64
          Copy-Item "libmpv-temp/libmpv-2.dll" "./publish/windows-x64/"

      - name: Publish Windows ARM64 app
        run: |
          dotnet publish src/UI/UI.csproj -c ${{ inputs.build_configuration }} -r win-arm64 --self-contained true `
            -p:PublishSingleFile=true `
            -o ./publish/windows-arm64

      - name: Remove PDB files
        run: |
          Get-ChildItem -Path "./publish/windows-x64/" -Recurse -Include *.pdb | Remove-Item -Force
          Get-ChildItem -Path "./publish/windows-arm64/" -Recurse -Include *.pdb | Remove-Item -Force

      - name: Setup WiX
        run: |
          dotnet tool install --global wix --version 5.0.1
          wix extension add -g WixToolset.UI.wixext/5.0.1

      - name: Build MSI Installer for x64
        run: |
          wix build ./installer/Product.wxs `
            -arch x64 `
            -ext WixToolset.UI.wixext `
            -d SourceDir="./publish/windows-x64/" `
            -d ProductVersion="1.0.0" `
            -o ./SubtitleEdit-Windows-x64.msi

      - name: Build MSI Installer for ARM64
        run: |
          wix build ./installer/Product.wxs `
            -arch arm64 `
            -ext WixToolset.UI.wixext `
            -d SourceDir="./publish/windows-arm64/" `
            -d ProductVersion="1.0.0" `
            -o ./SubtitleEdit-Windows-ARM64.msi

      - name: Create Windows ZIP packages
        run: |
          Compress-Archive -Path "./publish/windows-x64/*" -DestinationPath "./SubtitleEdit-Windows-x64.zip"
          Compress-Archive -Path "./publish/windows-arm64/*" -DestinationPath "./SubtitleEdit-Windows-ARM64.zip"

      - name: Upload Windows x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: se-windows-x64
          path: ./publish/windows-x64/

      - name: Upload Windows ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: se-windows-arm64
          path: ./publish/windows-arm64/

      - name: Upload Windows ZIP packages
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip-packages
          path: |
            ./SubtitleEdit-Windows-x64.zip
            ./SubtitleEdit-Windows-ARM64.zip

      - name: Upload Windows MSI Installers
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi-installers
          path: |
            ./SubtitleEdit-Windows-x64.msi
            ./SubtitleEdit-Windows-ARM64.msi

  build-macos:
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration ${{ inputs.build_configuration }} --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Publish macOS x64 app
        run: |
          dotnet publish src/UI/UI.csproj -c ${{ inputs.build_configuration }} -r osx-x64 --self-contained true \
            -p:PublishSingleFile=true \
            -o ./publish/macos-x64

      - name: Publish macOS ARM64 app
        run: |
          dotnet publish src/UI/UI.csproj -c ${{ inputs.build_configuration }} -r osx-arm64 --self-contained true \
            -p:PublishSingleFile=true \
            -o ./publish/macos-arm64

      - name: Remove PDB files from macOS artifacts
        run: |
          find "./publish/macos-x64/" -name "*.pdb" -type f -delete
          find "./publish/macos-arm64/" -name "*.pdb" -type f -delete

      - name: Create macOS ZIP packages
        run: |
          cd ./publish/macos-x64 && zip -r ../../SubtitleEdit-macOS-x64.zip . && cd ../..
          cd ./publish/macos-arm64 && zip -r ../../SubtitleEdit-macOS-ARM64.zip . && cd ../..

      - name: Upload macOS x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: se-macos-x64
          path: ./publish/macos-x64/

      - name: Upload macOS ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: se-macos-arm64
          path: ./publish/macos-arm64/

      - name: Upload macOS ZIP packages
        uses: actions/upload-artifact@v4
        with:
          name: macos-zip-packages
          path: |
            ./SubtitleEdit-macOS-x64.zip
            ./SubtitleEdit-macOS-ARM64.zip

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration ${{ inputs.build_configuration }} --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Publish Linux x64 app
        run: |
          dotnet publish src/UI/UI.csproj -c ${{ inputs.build_configuration }} -r linux-x64 --self-contained true \
            -p:PublishSingleFile=true \
            -o ./publish/linux-x64

      - name: Remove PDB files from Linux artifacts
        run: |
          find "./publish/linux-x64/" -name "*.pdb" -type f -delete

      - name: Create Linux TAR package
        run: |
          cd ./publish/linux-x64 && tar -czf ../../SubtitleEdit-Linux-x64.tar.gz . && cd ../..

      - name: Upload Linux x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: se-linux-x64
          path: ./publish/linux-x64/

      - name: Upload Linux TAR package
        uses: actions/upload-artifact@v4
        with:
          name: linux-tar-package
          path: ./SubtitleEdit-Linux-x64.tar.gz

  create-release:
    if: ${{ inputs.create_release }}
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Generate release tag
        id: tag
        run: |
          if [ -n "${{ inputs.release_tag }}" ]; then
            echo "tag=${{ inputs.release_tag }}" >> $GITHUB_OUTPUT
          else
            timestamp=$(date +"%Y%m%d-%H%M%S")
            echo "tag=pre-release-${timestamp}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p ./release-assets
          
          # Copy ZIP/TAR packages to release assets
          cp ./artifacts/windows-zip-packages/*.zip ./release-assets/
          cp ./artifacts/macos-zip-packages/*.zip ./release-assets/
          cp ./artifacts/linux-tar-package/*.tar.gz ./release-assets/
          
          # List all files that will be uploaded
          echo "Release assets:"
          ls -la ./release-assets/

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Subtitle Edit ${{ steps.tag.outputs.tag }}
          body: |
            **Build Configuration:** ${{ inputs.build_configuration }}
            **Build Date:** ${{ steps.date.outputs.date }}
            
            ### Downloads
            - **Windows x64:** [SubtitleEdit-Windows-x64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SubtitleEdit-Windows-x64.zip)
            - **Windows ARM64:** [SubtitleEdit-Windows-ARM64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SubtitleEdit-Windows-ARM64.zip)
            - **macOS x64:** [SubtitleEdit-macOS-x64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SubtitleEdit-macOS-x64.zip)
            - **macOS ARM64:** [SubtitleEdit-macOS-ARM64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SubtitleEdit-macOS-ARM64.zip)
            - **Linux x64:** [SubtitleEdit-Linux-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SubtitleEdit-Linux-x64.tar.gz)
            
            ### Installation
            1. Fix requirements, please see [System Requirements](https://github.com/niksedk/subtitleedit-avalonia#system-requirements)
            2. Download the appropriate package for your platform
            3. Extract the archive
            4. Run the executable (might need some permissions on macOS)
            
            *This is an automated build from the GitHub Actions workflow.*
          draft: false
          prerelease: ${{ inputs.is_prerelease }}

      - name: Upload Windows x64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/SubtitleEdit-Windows-x64.zip
          asset_name: SubtitleEdit-Windows-x64.zip
          asset_content_type: application/zip

      - name: Upload Windows ARM64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/SubtitleEdit-Windows-ARM64.zip
          asset_name: SubtitleEdit-Windows-ARM64.zip
          asset_content_type: application/zip

      - name: Upload macOS x64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/SubtitleEdit-macOS-x64.zip
          asset_name: SubtitleEdit-macOS-x64.zip
          asset_content_type: application/zip

      - name: Upload macOS ARM64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/SubtitleEdit-macOS-ARM64.zip
          asset_name: SubtitleEdit-macOS-ARM64.zip
          asset_content_type: application/zip

      - name: Upload Linux x64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/SubtitleEdit-Linux-x64.tar.gz
          asset_name: SubtitleEdit-Linux-x64.tar.gz
          asset_content_type: application/gzip